{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-14f25ecdb86877e95373baeec5d73c5d",
            "file": "src/app/services/local-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageService {\n\n  constructor() { }\n  public setItem(key: string, value: string) {\n    localStorage.setItem(key, value);\n  }\n    \n  public getItem(key: string){ \n    return localStorage.getItem(key)\n  }\n  public removeItem(key:string) {\n    localStorage.removeItem(key);\n  }\n  public clear(){\n    localStorage.clear(); \n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-7979b123b6dc5debcafb97a0257f8693",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'flight-booking'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport flight_data from './../assets/data/flight_data.json'\nimport user_data from './../assets/data/user_data.json'\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  \n  title = 'flight-booking';\n  //public userList:{}\n  ngOnInit() {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "BookingDialogComponent",
            "id": "component-BookingDialogComponent-765d89fb73caa4bf1dd45ca956502c25",
            "file": "src/app/home-page/booking-dialog/booking-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "booking-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "booking-dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<BookingDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'booking-dialog',\r\n  templateUrl: 'booking-dialog.html',\r\n})\r\nexport class BookingDialogComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<BookingDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<BookingDialogComponent>"
                    },
                    {
                        "name": "data",
                        "type": "any"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<BookingDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 mat-dialog-title>Confirm Booking</h1>\r\n<div mat-dialog-content>\r\n  <p>No of seats(less than total seats available)</p>\r\n  <mat-form-field>\r\n    <mat-label>xx</mat-label>\r\n    <input type=\"number\" matInput [(ngModel)]=\"data.seats\">\r\n  </mat-form-field>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"onNoClick()\">Cancel</button>\r\n  <button mat-button [mat-dialog-close]=\"data.seats\" [disabled]=\"(data.seats==0)||(data.totalseats<=data.seats)\">Book</button>\r\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "FailedloginComponent",
            "id": "component-FailedloginComponent-3496cdb6b3e32610dbc4a7a489f1d40b",
            "file": "src/app/login-page/failedlogin/failedlogin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-failedlogin",
            "styleUrls": [
                "./failedlogin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./failedlogin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-failedlogin',\n  templateUrl: './failedlogin.component.html',\n  styleUrls: ['./failedlogin.component.scss']\n})\nexport class FailedloginComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./failedlogin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span >\n    username or password didnt match!\n  </span>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-8abe6b96459785d8a36dcaca174a47fe",
            "file": "src/app/home-page/home-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-page",
            "styleUrls": [
                "./home-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bookings",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "codes",
                    "defaultValue": "[\n    //hardcoded list of airport codes\n    'DEL',\n    'AOI',\n    'LAS',\n    'DAL',\n    'SVO',\n    'SDU',\n    'TXK',\n    'YEK',\n    'YXX',\n  ]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "end",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "endcodes",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "flightList",
                    "defaultValue": "(flights as any).default",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "minDate",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "noresults",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "searchResult",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "seatNo",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "serializedDate0",
                    "defaultValue": "new FormControl(new Date())",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "serializedDate1",
                    "defaultValue": "new FormControl(new Date())",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "start",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "triptype",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "userdata",
                    "defaultValue": "(users as any).default",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "username",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "acceptData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "book",
                    "args": [
                        {
                            "name": "from",
                            "type": "any"
                        },
                        {
                            "name": "to",
                            "type": "any"
                        },
                        {
                            "name": "seats",
                            "type": "any"
                        },
                        {
                            "name": "time",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "seats",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "total",
                            "type": "number"
                        },
                        {
                            "name": "from",
                            "type": "any"
                        },
                        {
                            "name": "to",
                            "type": "any"
                        },
                        {
                            "name": "time",
                            "type": "any"
                        },
                        {
                            "name": "returntime",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "total",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "from",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "returntime",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "updateend",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { AppComponent } from '../app.component';\nimport * as flights from './../../assets/data/flight_data.json';\nimport * as users from './../../assets/data/user_data.json';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { BookingDialogComponent } from './booking-dialog';\n\n@Component({\n  selector: 'app-home-page',\n  templateUrl: './home-page.component.html',\n  styleUrls: ['./home-page.component.scss'],\n})\nexport class HomePageComponent implements OnInit {\n  username: any;\n\n  codes: string[] = [\n    //hardcoded list of airport codes\n    'DEL',\n    'AOI',\n    'LAS',\n    'DAL',\n    'SVO',\n    'SDU',\n    'TXK',\n    'YEK',\n    'YXX',\n  ];\n\n  endcodes: string[] = []; //object to store codes for destination after processing source\n  start: string = ''; //source\n  end: string = ''; //destination\n  minDate = new Date();\n  serializedDate0 = new FormControl(new Date()); //date\n  serializedDate1 = new FormControl(new Date()); //date\n\n  searchResult: any; //object to store results\n  flightList: any = (flights as any).default; //loading json data\n  userdata: any = (users as any).default; //loading user data to see bookings\n  bookings: any;\n  seatNo: number = 0;\n  noresults: boolean = false; //flag for no results\n  triptype: number = 1;\n  constructor(public dialog: MatDialog) {\n    this.username = localStorage.getItem('username');\n  }\n\n  ngOnInit(): void {\n    //processing userinfo for bookings\n    const user = this.userdata.filter(\n      (customer: { user: string }) =>\n        customer.user == localStorage.getItem('username')\n    );\n    for (const item of user) {\n      this.bookings = item[Object.keys(item)[2]];\n    }\n    console.log(this.bookings);\n  }\n\n  //function to update/create destination list   //use async and await for fetching from localstorgae\n  updateend() {\n    this.endcodes = this.codes.filter((code) => code !== this.start);\n    console.log(this.endcodes, this.start);\n    console.log(this.start);\n  }\n\n  //searching through data to see if requested source and destination pair exists\n  search() {\n    console.log(this.start, this.end, this.serializedDate0);\n    if (this.start == 'ALL' && this.end == 'ALL') {\n      this.searchResult = this.flightList;\n    } else if (this.end == 'ALL') {\n      this.searchResult = this.flightList.filter(\n        (flight: { from: string; to: string; time: string; seats: number }) =>\n          flight.from == this.start\n      );\n      console.log(this.searchResult);\n    } else if (this.start == 'ALL') {\n      this.searchResult = this.flightList.filter(\n        (flight: { from: string; to: string; time: string; seats: number }) =>\n          flight.to == this.end\n      );\n      console.log(this.searchResult);\n    } else if (this.start !== 'ALL' && this.end !== 'ALL') {\n      this.searchResult = this.flightList.filter(\n        (flight: { from: string; to: string; time: string; seats: number }) =>\n          flight.from == this.start && flight.to == this.end\n      );\n      console.log(this.searchResult);\n    }\n\n    if (this.searchResult.length == 0) {\n      this.noresults = true;\n    }\n  }\n\n  //function to open dialog box to confirm booking\n  book(from: any, to: any, seats: any, time: any) {\n    if (this.triptype == 1) {\n      this.openDialog(seats, from, to, time, '');\n    }\n    if (this.triptype == 2) {\n      const flightR = this.flightList.filter(\n        (flight: { from: string; to: string; time: string; seats: number }) =>\n          flight.from==to && flight.to==from\n      );\n      const returntime = flightR[0].time;\n      console.log(\n        flightR,\n        'here',\n        returntime,\n        typeof(returntime),\n        this.end,\n        this.start\n      );\n      this.openDialog(seats, from, to, time, returntime);\n    }\n  }\n\n  //opening dialog to ask for number of seats, and pushing the results in bookings array\n  openDialog(\n    total: number,\n    from: any,\n    to: any,\n    time: any,\n    returntime: any\n  ): void {\n    const dialogRef = this.dialog.open(BookingDialogComponent, {\n      width: '250px',\n      data: { seats: this.seatNo, totalseats: total },\n    });\n    console.log('booking will be executed', returntime);\n\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log('The dialog was closed');\n      console.log(result);\n      console.log(this.bookings, this.serializedDate0.value.toISOString());\n      if (result) {\n        //resulting data for pushing into bookings array\n\n        const data = {\n          path: from + '-' + to,\n          date: this.serializedDate0.value.toISOString().slice(0, 10),\n          time: time,\n          seats: result,\n        };\n        this.bookings.push(data);\n        if (this.triptype == 2) {\n          console.log('saving second booking', returntime);\n          const data2 = {\n            path: to + '-' + from,\n            date: this.serializedDate1.value.toISOString().slice(0, 10),\n            time: returntime,\n            seats: result,\n          };\n          this.bookings.push(data2);\n        }\n      }\n    });\n  }\n  acceptData(data: any) {\n    console.log(data);\n    this.start = data.from;\n    this.end = data.to;\n    this.triptype = data.trip;\n    this.serializedDate0 = data.startDate;\n    this.serializedDate1 = data.returnDate;\n    this.search();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card{ \r\n    width: 60vw;\r\n    display: block;\r\n    margin-left:auto;\r\n    margin-right:auto;\r\n}\r\n\r\n.console-container{\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n.container{\r\n  background-color: rgb(218, 226, 226);\r\n  min-height: 100%;\r\n}",
                    "styleUrl": "./home-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <p>\n    <mat-toolbar color=\"primary\">\n      <span>Flight booking Demo Application</span>\n      <span class=\"space\" style=\"width: 100%\"></span>\n      <span> {{ username }}</span>\n    </mat-toolbar>\n  </p>\n  <mat-tab-group mat-align-tabs=\"center\">\n    <mat-tab label=\"Book Flights\" backgroundColor=\"rgb(218, 226, 226);\">\n      <div class=\"console-container\">\n        <app-search-console\n          (searchData)=\"acceptData($event)\"\n        ></app-search-console>\n      </div>\n\n      <div style=\"height: 10px\"></div>\n      <mat-card\n        style=\"margin-bottom: 5px; text-align: center\"\n        *ngFor=\"let flight of searchResult\"\n      >\n        <div class=\"div\" style=\"display: flex; justify-content: space-evenly; font-size: medium; align-items: center;\">\n          <span style=\"flex-grow: 1;\"\n            ><b>From:</b> {{ flight.from }}</span\n          >\n          <span style=\"flex-grow: 1;\"\n            ><b>To:</b> {{ flight.to }}</span\n          >\n          <span style=\"flex-grow: 1;\"\n            ><b>Timings:</b> {{ flight.time }}</span\n          >\n          <span style=\"flex-grow: 1;\"\n            ><b>Seats:</b> {{ flight.seats }}</span\n          >\n          <div style=\"flex-grow: 2\">\n            <button\n              mat-raised-button\n              color=\"secondry\"\n              (click)=\"book(flight.from, flight.to, flight.seats, flight.time)\"\n            >\n              BOOK\n            </button>\n          </div>\n        </div>\n        <mat-card-actions style=\"text-align: center\"> </mat-card-actions>\n      </mat-card>\n      <div *ngIf=\"noresults\" style=\"text-align: center\">\n        <h1>No Flights for this combination of source and destination</h1>\n      </div>\n    </mat-tab>\n    <mat-tab label=\"My bokings\">\n      <mat-card\n        style=\"margin-bottom: 5px; text-align: center\"\n        *ngFor=\"let booking of bookings\"\n      >\n        <div class=\"div\" style=\"display: flex; justify-content: space-evenly; font-size: medium;\">\n          <span><b>From:</b> {{ booking.path }}</span>\n          <span><b>Date:</b> {{ booking.date }}</span>\n          <span><b>time:</b> {{ booking.time }}</span>\n          <span><b>seats:</b> {{ booking.seats }}</span>\n        </div>\n      </mat-card>\n    </mat-tab>\n  </mat-tab-group>\n</div>\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-20d9bd0f0bfefcdfd0c15b4a8865a72b",
            "file": "src/app/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userdata",
                    "defaultValue": "(users as any).default",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "username",
                    "defaultValue": "''",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "openPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "openSnackBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport * as users from './../../assets/data/user_data.json';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { FailedloginComponent } from './failedlogin/failedlogin.component';\nimport {\n  FormBuilder,\n  FormGroup,\n  FormControl,\n  Validators,\n} from '@angular/forms';\nimport { LocalStorageService} from './../services/local-storage.service' \n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss'],\n})\nexport class LoginPageComponent implements OnInit {\n  //variables to store and validate data\n  username: String = '';\n  password: String = '';\n  userdata: any = (users as any).default;\n  form: FormGroup;\n  loading = false;\n\n  constructor(\n    public router: Router,\n    private _snackBar: MatSnackBar,\n    private formBuilder: FormBuilder,\n    private localStorageService: LocalStorageService\n  ) {\n    this.form = this.formBuilder.group({\n      username:['', Validators.required],\n      password:['', Validators.required]\n    })\n  }\n\n  ngOnInit(): void {\n    }\n\n  //submit function to validate login credentials\n  onSubmit() {\n    console.log(this.f.username.value, this.f.password.value);\n\n    //getting user from json on basis on username\n    const user = this.userdata.filter(\n      (customer: { user: string; password: string }) =>\n        customer.user == this.f.username.value && this.f.password.value == customer.password\n    );\n    console.log(user, typeof(user), user.length,\"user\")\n    //checking user and validating password\n    if (user.length!=0) {\n      this.localStorageService.setItem('username',this.f.username.value);\n      this.openPage();\n    } else if(this.f.username.value!='' && this.f.password.value!='') {\n      this.openSnackBar();\n    }\n  }\n  openSnackBar() {\n    this._snackBar.openFromComponent(FailedloginComponent, {\n      duration: 5 * 1000,\n    });\n  }\n  //routing function\n  openPage() {\n    this.router.navigate(['home']);\n  }\n\n  \n get f() { return this.form.controls; }\n\n  \n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card{   \r\n    margin-left:auto;\r\n    margin-right:auto;\r\n    width: 500px;\r\n    height: 500px;\r\n    border-radius: 400px;\r\n    background-color: rgb(169, 211, 214);\r\n}\r\n\r\n::ng-deep .mat-card{\r\n  border: 55px solid #0000;\r\n}\r\n\r\n\r\n.loginCard{\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-image: url(\"https://i.imgur.com/QC16IpJ.png\");\r\n}\r\nbody{\r\n    text-align: center;\r\n    background-color: rgb(233, 230, 230);\r\n    background-attachment: fixed;\r\n    background-size: cover;\r\n}\r\n\r\n.form {\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n  }\r\n  \r\n.full-width {\r\n    width: 80%;\r\n  }\r\n  \r\n\r\nmat-form-field label {\r\nfont-size: 30px;\r\n}\r\nmat-form-field.mat-form-field-should-float label {\r\nfont-size: 20px;\r\n}",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                }
            },
            "templateData": "<body>\n  <div class=\"loginCard\">\n    <mat-card class=\"card\">\n      <mat-card-title><img src=\"https://pngimg.com/uploads/plane/plane_PNG101219.png\" style=\"width: 200px;\">\n      <br>Login to Your Account\n        \n      </mat-card-title>\n      <mat-card-content>\n        <div class=\"content\" style=\"text-align: center; margin-top: 2rem\">\n          <form [formGroup]='form'  (ngSubmit)=\"onSubmit()\" [style.fontSize.px]=\"18\">\n            <mat-form-field appearance=\"fill\" class='full-width'>\n              <mat-label>Username</mat-label>\n              <input\n                matInput\n                placeholder=\"saurus\"\n                formControlName ='username'\n              />\n            </mat-form-field>\n            <br>\n            <mat-form-field appearance=\"fill\" class='full-width'>\n              <mat-label>Password</mat-label>\n              <input\n                matInput\n                type=\"password\"\n                placeholder=\"password\"\n                formControlName='password'\n                style=\"border-radius: 15px; border-width: 2px;\"\n              />\n            </mat-form-field>\n            <div class=\"form-group\">\n              <button mat-raised-button [disabled]=\"loading\" class=\"full-width\" color=\"primary\">\n                  <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                  Login\n              </button>\n\n          </div>\n          </form>\n        </div>\n      </mat-card-content>\n\n    </mat-card>\n  </div>\n</body>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SearchConsoleComponent",
            "id": "component-SearchConsoleComponent-5390e371ba6e42c410cf7506d2d7fa98",
            "file": "src/app/home-page/search-console/search-console.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-console",
            "styleUrls": [
                "./search-console.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-console.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "searchData",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "codes",
                    "defaultValue": "[   //hardcoded list of airport codes\n    'DEL',\n    'AOI',\n    'LAS',\n    'DAL',\n    'SVO',\n    'SDU',\n    'TXK',\n    'YEK',\n    'YXX',\n  ]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "end",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "endcodes",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "minDate",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "serializedDate0",
                    "defaultValue": "new FormControl(new Date())",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "serializedDate1",
                    "defaultValue": "new FormControl(new Date())",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "start",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "triptype",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "username",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "updateend",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-search-console',\n  templateUrl: './search-console.component.html',\n  styleUrls: ['./search-console.component.scss']\n})\nexport class SearchConsoleComponent implements OnInit {\n  @Output() searchData= new EventEmitter<any>();\n\n  username: string = '';\n\n  codes: string[] = [   //hardcoded list of airport codes\n    'DEL',\n    'AOI',\n    'LAS',\n    'DAL',\n    'SVO',\n    'SDU',\n    'TXK',\n    'YEK',\n    'YXX',\n  ];\n  triptype: number =1;\n  endcodes: string[] = [];  //object to store codes for destination after processing source\n  start: string = '';       //source\n  end: string = '';         //destination\n  minDate = new Date();\n  serializedDate0 = new FormControl(new Date());   //date\n  serializedDate1 = new FormControl(new Date());   //date\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n  updateend() {\n    this.endcodes = this.codes.filter((code) => code !== this.start);\n    console.log(this.endcodes, this.start);\n    console.log(this.start);\n  }\n  search(){\n    this.searchData.emit({\n      from: this.start,\n      to: this.end,\n      trip: this.triptype,\n      startDate: this.serializedDate0,\n      returnDate: this.serializedDate1\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".console-container{\r\n    width: 80vw;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n.selection{\r\n    display: flex;\r\n    width: 70%;\r\n    justify-content: space-around;\r\n}\r\n\r\n.vertical-flex{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n}",
                    "styleUrl": "./search-console.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"console-container\">\n  <div class=\"selection\">\n    <div class=\"vertical-flex\">\n      <div class=\"source\">\n        <mat-form-field appearance=\"fill\">\n          <mat-label>FROM</mat-label>\n          <mat-select [(ngModel)]=\"start\" (selectionChange)=\"updateend()\">\n            <mat-option value=\"ALL\">ALL</mat-option>\n            <mat-option *ngFor=\"let code of codes\" [value]=\"code\">{{\n              code\n            }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n\n      <div class=\"destination\">\n        <mat-form-field appearance=\"fill\">\n          <mat-label>TO</mat-label>\n          <mat-select [disabled]=\"start == ''\" [(ngModel)]=\"end\">\n            <mat-option value=\"ALL\">ALL</mat-option>\n            <mat-option *ngFor=\"let code of endcodes\" [value]=\"code\">{{\n              code\n            }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <mat-radio-group [(ngModel)]=\"triptype\" color=\"primary\" class=\"vertical-flex\">\n      <mat-radio-button value=\"1\" [checked]=\"true\">One way</mat-radio-button>\n      <mat-radio-button value=\"2\" [checked]=\"triptype==2\">Round trip</mat-radio-button>\n    </mat-radio-group>\n\n    <div class=\"vertical-flex\">\n      <mat-form-field class=\"full-width\" appearance=\"fill\">\n        <mat-label>Choose a start date</mat-label>\n        <input\n          matInput\n          [matDatepicker]=\"picker1\"\n          [min]=\"minDate\"\n          [formControl]=\"serializedDate0\"\n        />\n        <mat-datepicker-toggle matSuffix [for]=\"picker1\">\n        </mat-datepicker-toggle>\n        <mat-datepicker #picker1></mat-datepicker>\n      </mat-form-field>\n      <mat-form-field class=\"full-width\" appearance=\"fill\">\n        <mat-label>Choose a return date</mat-label>\n        <input\n          matInput\n          [disabled]=\"triptype==1\"\n          [matDatepicker]=\"picker2\"\n          [min]=\"minDate\"\n          [formControl]=\"serializedDate1\"\n        />\n        <mat-datepicker-toggle matSuffix [for]=\"picker2\">\n        </mat-datepicker-toggle>\n        <mat-datepicker #picker2></mat-datepicker>\n      </mat-form-field>\n    </div>\n  </div>\n  <div class=\"vertical-flex\">\n    <button mat-flat-button color=\"primary\" style=\"width: 8rem;\" [disabled]=\"start=='' || end==''\" (click)=\"search()\">Search</button>\n  </div>\n</mat-card>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "FailedloginComponent"
                        },
                        {
                            "name": "HomePageComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "SearchConsoleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BookingDialogModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BookingDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "LoginPageComponent"
                    },
                    {
                        "path": "home",
                        "component": "HomePageComponent"
                    },
                    {
                        "path": "temp-dev",
                        "component": "SearchConsoleComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home-page/booking-dialog/booking-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookingDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/home-page/home-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/home-page/search-console/search-console.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchConsoleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/login-page/failedlogin/failedlogin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FailedloginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}